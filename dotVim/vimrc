" ====================== BootStrap 
augroup init
  autocmd!
  autocmd BufEnter * silent! lcd %:p:h
  autocmd BufNewFile,BufReadPost *.wxml set ft=html
  autocmd BufNewFile,BufReadPost *.wxss set ft=css
augroup END

filetype plugin indent on
syntax on
set hidden
set hlsearch
set incsearch
set ignorecase
set smartcase
set autoindent
set autoread
set backspace=indent,eol,start
set visualbell
set cursorline
set complete+=k
set dictionary+=/usr/share/dict/words
set laststatus=2
set statusline=%F
set number
set ruler
set tabstop=2 shiftwidth=2
set expandtab
set undodir=/tmp
set undofile
set wildmenu
set wildmode=list:longest,full
set path+=$PWD/**
set wildignore+=**/node_modules/** 
set includeexpr=substitute(v:fname,'^\\/','','')
set suffixesadd=.js,.jsx,.es,.es6,.cjs,.mjs,.jsm,.vue,.json,.ts

" =================== Keys Mapping
let mapleader = " "
noremap <Leader>. :vs $MYVIMRC<CR>
noremap <Leader>so :so $MYVIMRC<CR>

" Copy current file path
noremap <Leader>cp :lcd %:p:h<CR> :let @+=expand("%:~")<CR>
" Quick directory change
nnoremap <Leader>cd :lcd %:p:h<CR>:pwd<CR>

noremap <Leader>y "+y
noremap <Leader>Y "+Y

nnoremap ! :!

" Emmet like: div => <div><div>
inoremap <S-Tab> <Esc>yiWi<<Esc>Emma></<C-r>"><Esc>`ma
nnoremap S :w<CR>
nnoremap Q :q<CR>

noremap L :tabnext<CR>
noremap H :tabprevious<CR>
noremap <C-n> :tabnew<Cr>

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
 
" ========================== Plugin
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/onedark.vim
set rtp+=~/.vim/bundle/coc.nvim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'joshdick/onedark.vim'
Plugin 'neoclide/coc.nvim'

Plugin 'https://github.com.cnpmjs.org/AndrewRadev/splitjoin.vim'
Plugin 'https://github.com.cnpmjs.org/tpope/vim-surround'
Plugin 'https://github.com.cnpmjs.org/bronson/vim-visual-star-search'
Plugin 'https://github.com.cnpmjs.org/sheerun/vim-polyglot'
Plugin 'https://github.com.cnpmjs.org/darthmall/vim-vue'

Plugin 'https://github.com.cnpmjs.org/sdras/vue-vscode-snippets'
Plugin 'https://github.com/abusaidm/html-snippets'
call vundle#end()

" OneDark
set termguicolors
colorscheme onedark

" Netrw
nnoremap <Leader>r <Plug>NetrwRefresh
let g:netrw_list_hide= '.*\.swp$,.*\.swo$'

" Coc ------------ Start ------------
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-tsserver',
      \ 'coc-snippets',
      \ 'coc-lists',
      \ 'coc-yank',
      \ 'coc-eslint',
      \ 'coc-prettier',
      \ ]

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
set signcolumn=yes
" Provide custom statusline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Mappings for CoCList
" Search files
nnoremap <silent><nowait> <c-p>  :<C-u>CocList files<cr>
" Show yanked.
nnoremap <silent><nowait> <c-\>  :<C-u>CocList yank<cr>
" Show all diagnostics.
nnoremap <silent><nowait> <leader>dl  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <leader>ex  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <leader>co  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <leader>ol  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <leader>sb  :<C-u>CocList -I symbols<cr>

" Coc-Extension: Snippets
" Make <tab> used for trigger completion, completion confirm, snippet expand and jump.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
" Coc ------------ end ------------
