snippet view "基础的视图容器"
<view class="${1}" hover-class="${2:none}" hover-stop-propagation="${3:false}">
	${4}
</view>
endsnippet

snippet scroll-view "可滚动视图区域"
<scroll-view class="${1}" scroll-x="${2:false}" scroll-y="${3:false}" upper-threshold="${4:50}" lower-threshold="${5:50}" 
	scroll-top="${6:0}" scroll-left="${7:0}" scroll-into-view="${8}" scroll-with-animation="${9:false}" enable-back-to-top="${10:false}" 
	bindscrolltoupper="${11}" bindscrolltolower="${12}" bindscroll="${13}">
	${14}
</scroll-view>
endsnippet

snippet swiper "滑块视图容器"
<swiper class="${1}" indicator-dots="${2:false}" indicator-color="${3:rgba(0,0,0,.3)}" autoplay="${4:false}" 
	${5:current="0"} ${6:current-item-id=""} interval="${7:5000}" duration="${8:1000}" circular="${9:false}" vertical="${10:false}" 
previous-margin="${10:0px}" next-margin="${11:0px}" display-multiple-items="${12:1}" skip-hidden-item-layout="${13:false}" bindchange="${14}" ${15:bindanimationfinish=""}>
	${16}
</swiper>
endsnippet

snippet swiper-item "仅可放置在<swiper/>组件中，宽高自动设置为100%"
<swiper-item class="${1}" item-id="${2}">
	${3}
</swiper-item>
endsnippet

snippet movable-area "movable-view 的可移动区域"
<movable-area class="${1}" scale-area="${2:false}">
	${3}
</movable-area>
endsnippet

snippet movable-view "可移动的视图容器 在页面中可以拖拽滑动"
<movable-view class="${1}" direction="${2:none}" inertia="${3:false}" out-of-bounds="${4:false}" x="${5}" y="${6}" damping="${7:20}" 
	friction="${8:2}" disabled="${9:false}" scale="${10:false}" scale-min="${11:0.5}" scale-max="${12:10}" scale-value="${13:1}" 
	animation="${14:true}" bindchange="${15}" bindscale="${16}">
	${17}
</movable-view>
endsnippet

snippet cover-view "覆盖在原生组件之上的文本视图，可覆盖的原生组件包括map、video、canvas、camera、live-player、live-pusher，只支持嵌套cover-view、cover-image，可在cover-view中使用button"
<cover-view class="${1}" scroll-top="${2:0}">
	${3}
</cover-view>
endsnippet

snippet cover-image "覆盖在原生组件之上的图片视图，可覆盖的原生组件同cover-view，支持嵌套在cover-view里"
<cover-image class="${1}" src="${2}" bindload="${3}" binderror="${4}">
	${5}
</cover-image>
endsnippet

snippet icon "图标"
<icon class="${1}" type="${2:success|success_no_circle|info|warn|waiting|cancel|download|search|clear}" size="${3:23}" color="${4}">
	${5}
</icon>
endsnippet

snippet text "文本"
<text class="${1}" selectable="${2:false}" space="${3:false}" decode="${4:false}">
	${5}
</text>
endsnippet

snippet rich-text "富文本"
<rich-text class="${1}" nodes="{{$2}}">
	${3}
</rich-text>
endsnippet

snippet progress "进度条"
<progress class="${1}" percent="${2}" show-info="${3:false}" stroke-width="${4:6}" color="${5:#09BB07}" 
	active="${6:false}" backgroundColor="${7}" activeColor="${8}" active-mode="${9:backwards}">
	${10}
</progress>
endsnippet

snippet button "按钮"
<button class="${1}" size="${2:default}" type="${1:default}" plain="${2:false}" disabled="${3:false}" loading="${4:false}" 
	hover-class="${5:button-hover}" hover-stop-propagation="${6:false}" 
	${7: form-type="submit|reset"} ${8:open-type="contact|share|getUserInfo|openSetting|feedback"} >
	${9}
</button>
endsnippet

snippet checkbox-group "多项选择器 内部由多个checkbox组成"
<checkbox-group bindchange="${1}">
	${2}
</checkbox-group>
endsnippet

snippet checkbox "多选项目"
<checkbox class="${1}" value="${2}" disabled="${3:false}" checked="${4:false}" color="${5}">
	${6}
</checkbox>
endsnippet

snippet form "表单。将组件内的用户输入的<switch/> <input/> <checkbox/> <slider/> <radio/> <picker/> 提交"
<form class="${1}" report-submit="${2:false}" bindsubmit="${3}" bindreset="${4}">
	${5}
</form>
endsnippet

snippet input "输入框"
<input class="${1}" value="${2}" type="${3:text|number|idcard|digit|time|date}" password="${4:false}" placeholder="${5}" placeholder-style="${6}" placeholder-class="${7:input-placeholder}" 
	disabled="${8:false}" maxlength="${9:140}" focus="${10:false}" bindinput="${11}" bindfocus="${12}" bindblur="${13}" bindconfirm="${14}">
	${15}
</input>
endsnippet

snippet label "用来改进表单组件的可用性，使用for属性找到对应的id，或者将控件放在该标签下，当点击时，就会触发对应的控件。for优先级高于内部控件，内部有多个控件的时候默认触发第一个控件。目前可以绑定的控件有<button/>、<checkbox/>、<radio/>、<switch/>"
<label class="${1}" for="${2}">
	${3}
</label>
endsnippet

snippet picker "滚动选择器。现支持三种选择器 通过mode来区分，分别是普通选择器、时间选择器、日期选择器。默认是普通选择器"
<picker class="${1}" mode="${2:selector|multiSelector|time|date|region}" range="${3:[]}" ${4:range-key=""} value="${5}" 
	disabled="${6:false}" bindchange="${7}" bindcancel="${8}">
	${9}
</picker>
endsnippet

snippet picker-view "嵌入页面的滚动选择器"
<picker-view value="${1}" indicator-class="${2}" indicator-style="${3}" mask-class="${4}" mask-style="${5}" bindchange="${6}">
	${7}
</picker-view>
endsnippet

snippet picker-view-column "仅可放置于<picker-view />中 其孩子节点的高度会自动设置成与picker-view的选中框的高度一致"
<picker-view-column>
	${1}
</picker-view-column>
endsnippet

snippet radio-group "单项选择器 内部由多个<radio/>组成"
<radio-group bindchange="${1}">
	${2}
</radio-group>
endsnippet

snippet radio "单选项目"
<radio class="${1}" value="${2}" disabled="${3:false}" checked="${4:false}" color="${5}">
	${6}
</radio>
endsnippet

snippet slider "滑动选择器"
<slider class="${1}" min="${2:0}" max="${3:100}" step="${4:1}" disabled="${5:false}" value="${6}" show-value="${7:false}" 
	backgroundColor="${8:#e9e9e9}" block-size="${9:28}" block-color="${10:#ffffff}" bindchanging="${11}" bindchange="${12}">
	${13}
</slider>
endsnippet

snippet switch "开关选择器"
<switch class="${1}" checked="${2:false}" type="${3:switch|checkbox}" bindchange="${4}">
	${5}
</switch>
endsnippet

snippet textarea "多行输入框"
<textarea class="${1}" value="${2}" placeholder="${3}" placeholder-style="${4}" placeholder-class="${5:textarea-placeholder}" 
	disabled="${6:false}" maxlength="${7:140}" auto-focus="${8:false}" focus="${9:false}" auto-height="${10}" 
	bindinput="${11}" bindfocus="${12}" bindblur="${13}" bindconfirm="${14}" bindlinechange="%{15}">
	${16}
</textarea>
endsnippet

snippet navigator "页面链接"
<navigator class="${1}" target="${2}" url="${3}" hover-class="${4:navigator-hover}" open-type="${5:navigate}">
	${6}
</navigator>
endsnippet

snippet functional-page-navigator "页面链接"
<functional-page-navigator name="${1:loginAndGetUserInfo|requestPayment}" version="${2:release}" bindsuccess="${3}" bindfail="${4}">
	${5}
</functional-page-navigator>
endsnippet

snippet audio "音频。1.6.0 版本开始，该组件不再维护"
<audio id="${1}" src="${2}" loop="${3:false}" controls="${4:false}" poster="${5}" name="${6:未知音频}" author="${7:未知作者}" 
	binderror="${8}" bindplay="${9}" bindpause="${10}" bindtimeupdate="${11}" bindended="${12}">
	${13}
</audio>
endsnippet

snippet image "图片。默认宽度300px、高度225px。image组件中二维码/小程序码图片不支持长按识别"
<image class="${1}" src="${2}" mode="${3:aspectFit|aspectFill|widthFix}" lazy-load="${4:false}" binderror="${5}" bindload="${6}">
	${7}
</image>
endsnippet

snippet video "视频。默认宽度300px、高度225px，可通过wxss设置宽高"
<video class="${1}" src="${2}" initial-time="${3:0}" autoplay="${4:false}" loop="${5:false}" muted="${6:false}" direction="${7:0}" 
	bindplay="${8}" bindpause="${9}" bindended="${10}" bindtimeupdate="${11}" bindwaiting="${12}" binderror="${13}">
	${14}
</video>
endsnippet

snippet camera "系统相机。需要用户授权 scope.camera"
<camera class="${1}" mode="${2:normal}" device-position="${3:back}" flash="${4:auto}" scan-area="[${5},${6},${7},${8}]" 
	bindstop="${9}" bindscancode="${10}" binderror="${11}">
	${12}
</camera>
endsnippet

snippet live-player "实时音视频播放。默认宽度300px、高度225px，可通过wxss设置宽高"
<live-player class="${1}" src="${2}" mode="${3:live}" autoplay="${4:false}" muted="${5:false}" orientation="${6:vertical}" 
	object-fit="${7:contain}" min-cache="${8:1}" max-cache="${9:3}" 
	bindstatechange="${10}" bindfullscreenchange="${11}" bindnetstatus="${12}">
	${13}
</live-player>
endsnippet

snippet live-pusher "实时音视频录制。需要用户授权 scope.camera、scope.record。默认宽度为100%、无默认高度，请通过wxss设置宽高"
<live-pusher class="${1}" url="${2}" mode="${3:SD|HD|FHD|RTC}" autopush="${4:false}" muted="${5:false}" enable-camera="${6:true}" 
	auto-focus="${7:true}" orientation="${8:vertical}" beauty="${9:0}" whiteness="${10:0}" min-bitrate="${11:200}" max-bitrate="${12:1000}" 
	bindstatechange="${13}" bindnetstatus="${14}" binderror="${15}">
	${16}
</live-pusher>
endsnippet

snippet map "地图"
<map id="${1}" class="2" longitude="${3}" latitude="${4}" scale="${5:16}" markers="${6}" 
	bindregionchange="${7}" bindtap="${8}" bindupdated="${9}" ></map>
endsnippet

snippet canvas "画布"
<canvas class="${1}" canvas-id="${2}" bindtouchstart="${3}" bindtouchmove="${4}" bindtouchend="${5}" 
	bindtouchcancel="${6}" bindlongtap="${7}" binderror="${8}"></canvas>
endsnippet

snippet open-data "用于展示微信开放的数据"
<open-data class="${1}" type="${2:groupName}" ${3:open-gid=""}></open-data>
endsnippet

snippet web-view "可以用来承载网页的容器，会自动铺满整个小程序页面"
<web-view src="${1}" bindmessage="${2}"></web-view>
endsnippet

snippet ad "广告模块"
<ad class="${1}" unit-id="${2}" bindload="${3}" binderror="${4}"></ad>
endsnippet

snippet block "block标签，不是组件，只是包装元素，不会在页面中做任何渲染，只接受控制属性"
<block wx:for="{{${1:items}}}">
	${2}
</block>
endsnippet
