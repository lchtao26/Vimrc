priority -50

extends javascript, html

snippet imr "Import React"
import * as React from 'react';
endsnippet

snippet imrc "Import React, { Component }"
import * as React from 'react';
import { Component } from 'react';
endsnippet

snippet imrs "Import React, { useState }"
import * as React from 'react';
import { useState } from 'react';
endsnippet

snippet imrse "Import React, { useState, useEffect }"
import * as React from 'react';
import { useState, useEffect } from 'react';
endsnippet

snippet impt "Import PropTypes"
import PropTypes from 'prop-types';
endsnippet

snippet impc "Import React, { PureComponent }"
import * as React from 'react';
import { PureComponent } from 'react';
endsnippet

snippet cc "Class Component"
class $1 extends Component {
	state = { $2 }
	render() { 
		return ( $0 );
	}
}
 
export default $1;
endsnippet

snippet cpc "Class Pure Component"
class $1 extends PureComponent {
	state = { $2 }
	render() { 
		return ( $0 );
	}
}
 
export default $1;
endsnippet

snippet ccc "Class Component With Constructor"
class $1 extends Component {
	constructor(props) {
		super(props);
		this.state = { $2 }
	}
	render() { 
		return ( $0 );
	}
}
 
export default $1;
endsnippet

snippet sfc "Stateless Function Component"
const $1 = ($2) => {
	return ( $0 );
}
 
export default $1;
endsnippet

snippet ffc "Function Syntax Component"
function $1($2) {
	return ( $0 );
}

export default $1;
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	$0
}
endsnippet

snippet uef "useEffect Hook"
useEffect(() => {
	$1
}, []);
endsnippet

snippet cwm "componentWillMount"
//WARNING! To be deprecated in React v17. Use componentDidMount instead.
componentWillMount() {
	$0
}
endsnippet

snippet cwrp "componentWillReceiveProps"
//WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.
componentWillReceiveProps(nextProps) {
	$0
}
endsnippet

snippet gds "getDerivedStateFromProps"
static getDerivedStateFromProps(nextProps, prevState) {
	$0
}
endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet cwu "componentWillUpdate"
//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.
componentWillUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {
	$0
}
endsnippet

snippet cdc "componentDidCatch"
componentDidCatch(error, info) {
	$0
}
endsnippet

snippet gsbu "getSnapshotBeforeUpdate"
getSnapshotBeforeUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet ss "setState"
this.setState({ $1: $2 });
endsnippet

snippet ssf "Functional setState"
this.setState(prevState => {
	return { $1: prevState.$1 };
});
endsnippet

snippet usf "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);
endsnippet

snippet ren "render"
render() {
	return (
		 $0
	);
}
endsnippet

snippet rprop "Render Prop"
class $1 extends Component {
	state = { $2: $3 }
	render() { 
		return this.props.render({
			$2: this.state.$2
		});
	}
}
 
export default $1;
endsnippet

snippet hoc "Higher Order Component"
function $1($2) {
	return class extends Component {
		constructor(props) {
			super(props);
		}
 
		render() {
			return <$2 {...this.props} $0/>
		}
	}
}
endsnippet

snippet cp "Context Provider"
export const $1 = React.createContext();

const $1Provider = (props) => {
	// Initial Provider State
	const state = {};

	// Reducer Function
	const $2 = (state, action) => {
		
	};

	return (
		<$1.Provider value={{state: state, $2}}>
			{props.children}
		</$1.Provider>
	);
}

export default $1Provider;
endsnippet
