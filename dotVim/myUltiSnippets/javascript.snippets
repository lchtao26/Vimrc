
snippet imp "Imports entire module statement in ES6 syntax"
import ${2:moduleName} from '${1:module}';$0
endsnippet

snippet imn "Imports entire module in ES6 syntax without module name"
import '${1:module}';$0
endsnippet

snippet imd "Imports only a portion of the module in ES6 syntax"
import { $2 } from '${1:module}';$0
endsnippet

snippet ime "Imports everything as alias from the module in ES6 syntax"
import * as ${2:alias} from '${1:module}';$0
endsnippet

snippet ima "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
import { ${2:originalName} as ${3:alias} } from '${1:module}';$0
endsnippet

snippet rqr "Require a package"
require('${1:package}');
endsnippet

snippet req "Require a package to const"
const ${1:packageName} = require('${1:package}');$0
endsnippet

snippet mde "Module exports from Common JS, node syntax at ES6"
module.exports = {
	$0
};

endsnippet

snippet env "Export named variable in ES6 syntax"
export const ${1:exportVariable} = ${2:localVariable};

endsnippet

snippet enf "Export named function in ES6 syntax"
export const ${1:functionName} = (${2:params}) => {
	$0
};

endsnippet

snippet edf "Export default function in ES6 syntax"
export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {
	$0
};

endsnippet

snippet ecl "Export default class in ES6 syntax"
export default class ${1:className} {
	$0
};

endsnippet

snippet ece "Export default class which extends a base one in ES6 syntax"
export default class ${1:className} extends ${2:baseclassName} {
	$0
};

endsnippet

snippet con "Add default constructor in a class in ES6 syntax"
constructor(${1:params}) {
	${0}
}
endsnippet

snippet met "Creates a method inside a class in ES6 syntax"
${1:methodName}(${2:params}) {
	${0}
}
endsnippet

snippet pge "Creates a getter property inside a class in ES6 syntax"
get ${1:propertyName}() {
	return this.${0};
}
endsnippet

snippet pse "Creates a setter property inside a class in ES6 syntax"
set ${1:propertyName}(${2:value}) {
	${0};
}
endsnippet

snippet fre "Creates a forEach statement in ES6 syntax"
${1:array}.forEach(${2:currentItem} => {
	${0}
});
endsnippet

snippet fof "Iterating over property names of iterable objects"
for (const ${1:item} of ${2:object}) {
	${0}
}
endsnippet

snippet fin "Iterating over property values of iterable objects"
for (const ${1:item} in ${2:object}) {
	${0}
}
endsnippet

snippet fn "Creates a named function"
function ${1:name} (${2:params}) => {
	${3}
}
endsnippet

snippet ofn "Creates an object function"
${1:name} (${2:params}) {
	${3}
}
endsnippet

snippet afn "Creates an anonymous function in ES6 syntax"
(${1:params}) => {
	${2}
}
endsnippet

snippet cfn "Creates a named function in ES6 syntax"
const ${1:name} = (${2:params}) => {
	${3}
}
endsnippet

snippet dob "Creates and assigns a local variable using object destructing"
const {${2:propertyName}} = ${1:objectToDestruct};
endsnippet

snippet dar "Creates and assigns a local variable using array destructing"
const [${2:propertyName}] = ${1:arrayToDestruct};
endsnippet

snippet sti "Executes the given function at specified intervals in ES6 syntax"
setInterval(() => {
	${2}
}, ${0:intervalInms});
endsnippet

snippet sto "Executes the given function after the specified delay in ES6 syntax"
setTimeout(() => {
	${2}
}, ${1:delayInms});
endsnippet

snippet prom "Creates and returns a new Promise in the standard ES6 syntax"
return new Promise((resolve, reject) => {
	${1}
});
endsnippet

snippet thenc "Add the .then and .catch methods to handle promises"
.then((${1:result}) => {
	${2}
}).catch((${3:err}) => {
	${4}
});
endsnippet

snippet cas "If the specified expression is false, the message is written to the console along with a stack trace"
console.assert(${1:expression}, ${2:object});
endsnippet

snippet ccl "Clears the console"
console.clear();
endsnippet

snippet cco "Writes the the number of times that count() has been invoked at the same line and with the same label"
console.count(${1:label});
endsnippet

snippet cdb "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
console.debug(${1:object});
endsnippet

snippet cdi "Prints a JavaScript representation of the specified object"
console.dir(${1:object});
endsnippet

snippet cer "Displays a message in the console and also includes a stack trace from where the method was called"
console.error(${1:object});
endsnippet

snippet cgr "Groups and indents all following output by an additional level, until console.groupEnd() is called."
console.group('${1:label}');
endsnippet

snippet cge "Closes out the corresponding console.group()."
console.groupEnd();
endsnippet

snippet log "Displays a message in the console"
console.log(${1:object});
endsnippet

snippet clo "Displays an object in the console with its name"
console.log('${1:object} :>> ', ${1:object});
endsnippet

snippet ctr "Prints a stack trace from the point where the method was called"
console.trace(${1:object});
endsnippet

snippet cwa "Displays a message in the console but also displays a yellow warning icon along with the logged message"
console.warn(${1:object});
endsnippet

snippet cin "Displays a message in the console but also displays a blue information icon along with the logged message"
console.info(${1:object});
endsnippet

snippet clt "Displays tabular data as a table."
console.table(${1:object});
endsnippet

snippet cti "Sets starting point for execution time measurement"
console.time(${1:object});
endsnippet

snippet cte "Sets end point for execution time measurement"
console.timeEnd(${1:object});
endsnippet
