snippet vdata "Vue Component Data"
data() {
	return {
		${1:key}: ${2:value}
	}
},
endsnippet

snippet vmethod "vue method"
methods: {
	${1:name}() {
		${0}
	}
},
endsnippet

snippet vcomputed "computed value"
computed: {
	${1:name}() {
		return this.${2:data} ${0}
	}
},
endsnippet

snippet vbeforecreate "beforeCreate lifecycle method"
beforeCreate () {
	${0};
},
endsnippet

snippet vcreated "created lifecycle method"
created () {
	${0};
},
endsnippet

snippet vbeforemount "beforeMount lifecycle method"
beforeMount () {
	${0};
},
endsnippet

snippet vmounted "mounted lifecycle method"
mounted () {
	${0};
},
endsnippet

snippet vbeforeupdate "beforeUpdate lifecycle method"
beforeUpdate () {
	${0};
},
endsnippet

snippet vupdated "updated lifecycle method"
updated () {
	${0};
},
endsnippet

snippet vbeforedestroy "beforeDestroy lifecycle method"
beforeDestroy () {
	${0};
},
endsnippet

snippet vdestroyed "destroyed lifecycle method"
destroyed () {
	${0};
},
endsnippet

snippet vwatcher "vue watcher"
watch: {
	${1:data}(${2:newValue}, ${3:oldValue}) {
		${0}
	}
},
endsnippet

snippet vwatcher-options "vue watcher with options"
watch: {
	${1:data}: {
		immediate: ${2:true},
		deep: ${3:true},
		handler(${4:newValue}, ${5:oldValue}) {
			${0}
		}
	}
},
endsnippet

snippet vprops "Vue Props with Default"
props: {
	${1:propName}: {
		type: ${2:Number},
		default: ${0}
	},
},
endsnippet

snippet vimport "Import one component into another"
import ${1:New} from '@/components/${1:New}.vue';
endsnippet

snippet vcomponents "Import one component into another, within export statement"
components: {
	${1:New},
},
endsnippet

snippet vimport-export "import a component and include it in export default"
import ${1:Name} from '@/components/${1:Name}.vue';

export default {
	components: {
		${1:Name}
	},
};
endsnippet

snippet vimport-dynamic "Import component that should be lazy loaded"
${1:New} = () => import('@/components/${1:New}.vue')
endsnippet

snippet vmapstate "map getters inside a vue component"
import { mapState } from 'vuex';

export default {
	computed: {
		...mapState([
			${1:'nameOfState'},
		])
	},
};
endsnippet

snippet vmapgetters "mapgetters inside a vue component"
import { mapGetters } from 'vuex';

export default {
	computed: {
		...mapGetters([
			${1:'nameOfGetter'},
		])
	},
};
endsnippet

snippet vmapmutations "mapmutations inside a vue component"
import { mapMutations } from 'vuex';

export default {
	methods: {
		...mapMutations([
			${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` 
		])
	},
};
endsnippet

snippet vmapactions "mapactions inside a vue component"
import { mapActions } from 'vuex';

export default {
	methods: {
		...mapActions([
			${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` 
		])
	},
};
endsnippet

snippet vfilter "vue filter"
filters: {
	${1:fnName}: function(${2:value}) {
		return ${2:value}${0};
	}
}
endsnippet

snippet vmixin "vue mixin"
const ${1:mixinName} = {
	mounted() {
		console.log('hello from mixin!');
	},
};
endsnippet

snippet vmixin-use "vue use mixin"
mixins: [${1:mixinName}],
endsnippet

snippet vc-direct "vue custom directive"
Vue.directive('${1:directiveName}', {
	bind(el, binding, vnode) {
		el.style.${2:arg} = binding.value.${2:arg};
	}
});
endsnippet

snippet vimport-lib "import a library"
import { ${1:libName} } from '${1:libName}';
endsnippet

snippet vimport-gsap "import gsap library"
import gsap from 'gsap';
endsnippet

snippet vanimhook-js "transition component js hooks"
beforeEnter(el) {
	console.log('beforeEnter');
},
enter(el, done) {
	console.log('enter');
	done();
},
beforeLeave(el) {
	console.log('beforeLeave');
},
leave(el, done) {
	console.log('leave');
	done();
},
endsnippet

snippet vcommit "commit to vuex store in methods for mutation"
${1:mutationName}() {
	this.$store.commit('${1:mutationName}', ${2:payload});
}
endsnippet

snippet vdispatch "dispatch to vuex store in methods for action"
${1:actionName}() {
	this.$store.dispatch('${1:actionName}', ${2:payload});
}
endsnippet

snippet vtest "unit test component"
import Vue from 'vue';
import ${1:HelloWorld} from './components/${1:HelloWorld}';

describe('${1:HelloWorld}.vue', () => {
	it('${2:should render correct contents}', () => {
		const Constructor = Vue.extend(${1:HelloWorld});
		const vm = new Constructor().$mount();
		expect(vm.$el.querySelector('.hello h1').textContent)
			.to.equal(${3:'Welcome to Your Vue.js App'});
	});
});
endsnippet

snippet vconfig "vue.config.js"
module.exports = {
	css: {
		loaderOptions: {
			${1:sass}: {
				data: `${2:@import '@/styles/_variables.scss';}`
			}
		}
	}
}
endsnippet

snippet v3reactive "Vue Composition api - reactive"
const ${1:name} = reactive({
	${2:count}: ${3:0}
})
endsnippet

snippet v3computed "Vue Composition api - computed"
const ${1:name} = computed(() => {
	return ${2}
})
endsnippet

snippet v3watch "Vue Composition api - watcher single source"
watch(() => ${1:foo}, (newValue, oldValue) => {
	${2}
})
endsnippet

snippet v3watch-array "Vue Composition api - watch as array"
watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {
	${3}
})
endsnippet

snippet v3watcheffect "Vue Composition api - watchEffect"
watchEffect(() => {
	${1}
})
endsnippet

snippet v3ref "Vue Ref"
const ${1:name} = ref(${2:initialValue})
endsnippet

snippet v3onmounted "Vue Mounted Lifecycle hook"
onMounted(() => {${1}})
endsnippet

snippet v3onbeforemount "Vue onBeforeMount Lifecycle hook"
onBeforeMount(() => {${1}})
endsnippet

snippet v3onbeforeupdate "Vue onBeforeUpdate Lifecycle hook"
onBeforeUpdate(() => {${1}})
endsnippet

snippet v3onupdated "Vue onUpdated Lifecycle hook"
onUpdated(() => {${1}})
endsnippet

snippet v3onerrorcaptured "Vue onErrorCaptured Lifecycle hook"
onErrorCaptured(() => {${1}})
endsnippet

snippet v3onunmounted "(destroyed) Vue onUnmounted Lifecycle hook"
onUnmounted(() => {${1}})
endsnippet

snippet v3onbeforeunmount "(beforeDestroy) Vue onBeforeUnmount Lifecycle hook"
onBeforeUnmount(() => {${1}})
endsnippet

snippet vplugin "Import a plugin to main.js or plugins file"
import Vue from 'vue'
import ${1:VueCompositionApi} from '${2:@vue/composition-api}'

Vue.use(${1:VueCompositionApi})
endsnippet

snippet v3reactive-setup "Vue Composition API Script with Reactive"
import { reactive, toRefs } from '@vue/composition-api'

export default {
	setup () {
		const state = reactive({
			${0:count}: ${1:0},
		})
	
		return {
			...toRefs(state),
		}
	}
}
endsnippet

snippet v3useinoptions "Use Composition API within Options API"
import { ${0:component} } from '@/composables/${0:component}.js'

export default {
	setup () {
		const { ${1:name} } = ${0:component}()
	
		return {
			${1:name}
		}
	}
}
endsnippet
