snippet wx-app "App对象及其生命周期函数和回调函数"
//app.js
App({
	//onLaunch,onShow: options(path,query,scene,shareTicket,referrerInfo(appId,extraData))
	onLaunch: function(options){
		${1}
	},
	onShow: function(options){

	},
	onHide: function(){

	},
	onError: function(msg){

	},
	//options(path,query,isEntryPage)
	onPageNotFound: function(options){

	},
	globalData: {
		${2}
	}
});
endsnippet

snippet wx-page "Page对象及其生命周期函数和回调函数"
//Page Object
Page({
	data: {
		${1}
	},
	//options(Object)
	onLoad: function(options){
		${2}
	},
	onReady: function(){
		${3}
	},
	onShow: function(){
		${4}
	},
	onHide: function(){

	},
	onUnload: function(){

	},
	onPullDownRefresh: function(){

	},
	onReachBottom: function(){

	},
	onShareAppMessage: function(){

	},
	onPageScroll: function(){

	},
	//item(index,pagePath,text)
	onTabItemTap:function(item){

	}
});
endsnippet

snippet wx-Component "Component对象及其生命周期函数和回调函数"
//Component Object
Component({
	properties: {
		${1:myProperty}:{
			type:${2:String},
			value:${3:''},
			observer: function(){${4}}
		},

	},
	data: {

	},
	methods: {
		${5}
	},
	created: function(){

	},
	attached: function(){

	},
	ready: function(){

	},
	moved: function(){

	},
	detached: function(){

	},
});
endsnippet

snippet getCurrentPages "获取当前页面栈"
${1:var curPages = } getCurrentPages();
${2}
endsnippet

snippet getApp "获取小程序实例"
${1:var appInst = } getApp();
${2}
endsnippet

snippet wx-request "发起网络请求"
${1:var reqTask = }wx.request({
	url: '${2}',
	data: {${3}},
	header: {${4:'content-type':'application/json'}},
	method: '${5:GET}',
	dataType: '${6:json}',
	responseType: '${7:text}',
	success: (result)=>{
		${8}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet reqTask-abort "中断请求任务。"
reqTask.abort();
endsnippet

snippet wx-uploadFile "将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 content-type 为 multipart/form-data。"
${1:var upTask = }wx.uploadFile({
	url: '${2}',
	filePath: ${3},
	name: ${4},
	formData: {${5}},
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet upTask-onProgressUpdate "监听上传进度变化事件。"
upTask.onProgressUpdate((result)=>{
		${1}
	});
endsnippet

snippet upTask-abort "中断上传任务。"
upTask.abort();
endsnippet

snippet wx-downloadFile "下载文件资源到本地，客户端直接发起一个HTTP GET请求，返回文件的本地临时路径。"
${1:var downTask = }wx.downloadFile({
	url: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet downTask-onProgressUpdate "监听下载进度变化事件。"
downTask.onProgressUpdate((result)=>{
		${1}
	});
endsnippet

snippet downTask-abort "中断下载任务。"
downTask.abort();
endsnippet

snippet wx-connectSocket "创建一个WebSocket连接。"
${1:var sockTask = }wx.connectSocket({
	url: '${2}',
	header: {${3:'content-type':'application/json'}},
	method: '${4:GET}',
	protocols: [${5}],
	success: ()=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onSocketOpen "监听WebSocket连接打开事件。"
wx.onSocketOpen(${1:result} => {
	${2}
});
endsnippet

snippet wx-onSocketError "监听WebSocket错误。"
wx.onSocketError(${1:result} => {
	${2}
});
endsnippet

snippet wx-sendSocketMessage "通过WebSocket连接发送数据，需要先wx.connectSocket，并在wx.onSocketOpen回调之后才能发送。"
wx.sendSocketMessage({
	data: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onSocketMessage "监听WebSocket接受到服务器的消息事件。"
wx.onSocketMessage((${1:result})=>{${2}});
endsnippet

snippet wx-closeSocket "关闭WebSocket连接。"
wx.closeSocket({
	code: ${1:1000},
	reason: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onSocketClose "监听WebSocket关闭。"
wx.onSocketClose((${1:result})=>{
	${2}
});
endsnippet

snippet sockTask-send "通过WebSocket连接发送数据。"
sockTask.send({
	data: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet sockTask-close "关闭WebSocket连接。"
sockTask.close({
	code: ${1},
	reason: ${2},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet sockTask-onOpen "监听WebSocket连接打开事件。"
sockTask.onOpen(${1:result} => {
	${2}
});
endsnippet

snippet sockTask-onClose "监听 WebSocket 连接关闭事件。"
sockTask.onClose(${1:result} => {
	${2}
});
endsnippet

snippet sockTask-onError "监听 WebSocket 错误。"
sockTask.onError(${1:result} => {
	${2}
});
endsnippet

snippet sockTask-onMessage "监听WebSocket接受到服务器的消息事件。"
sockTask.onMessage(${1:result} => {
	${2}
});
endsnippet

snippet wx-chooseImage "从本地相册选择图片或使用相机拍照。"
wx.chooseImage({
	count: ${1:9},
	sizeType: ${2:['original','compressed']},
	sourceType: ${3:['album','camera']},
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-previewImage "预览图片。"
wx.previewImage({
	current: '${1}',
	urls: [${2}],
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getImageInfo "获取图片信息，倘若为网络图片，需先配置download域名才能生效。"
wx.getImageInfo({
	src: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-saveImageToPhotosAlbum "保存图片到系统相册。需要用户授权 scope.writePhotosAlbum"
wx.saveImageToPhotosAlbum({
	filePath: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-startRecord "开始录音。需要用户授权 scope.record。1.6.0 起不再维护"
wx.startRecord({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopRecord "停止录音。1.6.0 起不再维护"
wx.stopRecord();
endsnippet

snippet wx-getRecorderManager "获取全局唯一的录音管理器recorderManager。"
${1:var recordManager = }wx.getRecorderManager();
endsnippet

snippet recordManager-start "开始录音"
recordManager.start({
	duration: ${1},
	sampleRate: ${2:44100},
	numberOfChannels: ${3:2},
	format: ${4:'aac'}
});
endsnippet

snippet recordManager-pause "暂停录音"
recordManager.pause();
endsnippet

snippet recordManager-resume "恢复录音"
recordManager.resume();
endsnippet

snippet recordManager-stop "停止录音"
recordManager.stop();
endsnippet

snippet recordManager-onStart "录音开始事件"
recordManager.onStart((${1})=>{
	${2}
});
endsnippet

snippet recordManager-onPause "录音暂停事件"
recordManager.onPause((${1})=>{
	${2}
});
endsnippet

snippet recordManager-onStop "录音停止事件，会回调文件地址"
recordManager.onStop((${1:result})=>{
	${2}
});
endsnippet

snippet recordManager-onFrameRecorded "已录制完指定帧大小的文件，会回调录音分片结果数据"
recordManager.onFrameRecorded((${1:result})=>{
	${2}
});
endsnippet

snippet recordManager-onError "录音错误事件, 会回调错误信息"
recordManager.onError((${1:errMsg})=>{
	${2}
});
endsnippet

snippet wx-playVoice "开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。1.6.0 起不再维护"
wx.playVoice({
	filePath: '${1}',
	duration: ${2:60},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-pauseVoice "暂停正在播放的语音。1.6.0 起不再维护"
wx.pauseVoice();
endsnippet

snippet wx-stopVoice "结束播放语音。1.6.0 起不再维护"
wx.stopVoice();
endsnippet

snippet wx-getBackgroundAudioPlayerState "获取后台音乐播放状态。1.2.0 起不再维护"
wx.getBackgroundAudioPlayerState({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-playBackgroundAudio "使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。1.2.0 起不再维护"
wx.playBackgroundAudio({
	dataUrl: '${1}',
	title: '${2}',
	coverImgUrl: '${3}',
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-pauseBackgroundAudio "暂停播放音乐。1.2.0 起不再维护"
wx.playBackgroundAudio();
endsnippet

snippet wx-seekBackgroundAudio "控制音乐播放进度(秒)。1.2.0 起不再维护"
wx.seekBackgroundAudio({
	position: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopBackgroundAudio "停止播放音乐。1.2.0 起不再维护"
wx.stopBackgroundAudio();
endsnippet

snippet wx-onBackgroundAudioPlay "监听音乐播放。1.2.0 起不再维护"
wx.onBackgroundAudioPlay((${1:result})=>{${2}});
endsnippet

snippet wx-onBackgroundAudioPause "监听音乐暂停。1.2.0 起不再维护"
wx.onBackgroundAudioPause((${1:result})=>{${2}});
endsnippet

snippet wx-onBackgroundAudioStop "监听音乐停止。1.2.0 起不再维护"
wx.onBackgroundAudioStop((${1:result})=>{${2}});
endsnippet

snippet wx-getBackgroundAudioManager "获取全局唯一的背景音频管理器 backgroundAudioManager。"
// properties(Read only)(duration,currentTime,paused,buffered)
// properties(src(m4a, aac, mp3, wav),startTime,title,epname,singer,coverImgUrl,webUrl,protocol)
${1:var backAudioManager = }wx.getBackgroundAudioManager();
endsnippet

snippet backAudioManager-src "音频的数据源，默认为空字符串，当设置了新的 src 时，会自动开始播放 ，目前支持的格式有 m4a, aac, mp3, wav。"
backAudioManager.src = ${1};
endsnippet

snippet backAudioManager-play "播放"
backAudioManager.play();
endsnippet

snippet backAudioManager-pause "暂停"
backAudioManager.pause();
endsnippet

snippet backAudioManager-stop "停止"
backAudioManager.stop();
endsnippet

snippet backAudioManager-seek "跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度。"
backAudioManager.seek(${1});
endsnippet

snippet backAudioManager-onCanplay "背景音频进入可以播放状态，但不保证后面可以流畅播放"
backAudioManager.onCanplay(${1:()=>{
		${2}
	}});
endsnippet

snippet backAudioManager-onPlay "背景音频播放事件"
backAudioManager.onPlay(()=>{
	${1}
});
endsnippet

snippet backAudioManager-onPause "背景音频暂停事件"
backAudioManager.onPause(()=>{
	${1}
});
endsnippet

snippet backAudioManager-onStop "背景音频停止事件"
backAudioManager.onStop(()=>{
	${1}
});
endsnippet

snippet backAudioManager-onEnded "背景音频自然播放结束事件"
backAudioManager.onEnded(()=>{
	${1}
});
endsnippet

snippet backAudioManager-onTimeUpdate "背景音频播放进度更新事件"
backAudioManager.onTimeUpdate((${1})=>{
	${2}
});
endsnippet

snippet backAudioManager-onPrev "用户在系统音乐播放面板点击上一曲事件（iOS only）"
backAudioManager.onPrev((${1})=>{
	${2}
});
endsnippet

snippet backAudioManager-onNext "用户在系统音乐播放面板点击下一曲事件（iOS only）"
backAudioManager.onNext((${1})=>{
	${2}
});
endsnippet

snippet backAudioManager-onError "背景音频播放错误事件"
backAudioManager.onError((${1:errMsg})=>{
	${2}
});
endsnippet

snippet backAudioManager-onWaiting "音频加载中事件，当音频因为数据不足，需要停下来加载时会触发"
backAudioManager.onWaiting((${1})=>{
	${2}
});
endsnippet

snippet wx-createAudioContext "创建并返回audio上下文audioContext对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内<audio/>组件。1.6.0 起不再维护"
${1:var audioContext = }wx.createAudioContext(${2}, this);
endsnippet

snippet audioContext-setSrc "设置音频的地址。1.6.0 起不再维护"
audioContext.setSrc('${1}');
endsnippet

snippet audioContext-play "播放。1.6.0 起不再维护"
audioContext.play();
endsnippet

snippet audioContext-pause "暂停。1.6.0 起不再维护"
audioContext.pause();
endsnippet

snippet audioContext-seek "跳转到指定位置，单位 s。1.6.0 起不再维护"
audioContext.seek(${1});
endsnippet

snippet wx-createInnerAudioContext "创建并返回内部 audio 上下文 innerAudioContext 对象。本接口是 wx.createAudioContext 升级版。1.6.0 开始支持"
// properties(Read only)(duration,currentTime,paused,buffered,volume)
// properties(src,startTime,autoplay,loop,obeyMuteSwitch)
${1:var innerAudioContext = }wx.createInnerAudioContext();
endsnippet

snippet innerAudioContext-play "播放"
innerAudioContext.play();
endsnippet

snippet innerAudioContext-pause "暂停"
innerAudioContext.pause();
endsnippet

snippet innerAudioContext-stop "停止"
innerAudioContext.stop();
endsnippet

snippet innerAudioContext-seek "跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度"
innerAudioContext.seek(${1});
endsnippet

snippet innerAudioContext-destroy "销毁当前实例"
innerAudioContext.destroy();
endsnippet

snippet innerAudioContext-onCanplay "音频进入可以播放状态，但不保证后面可以流畅播放"
innerAudioContext.onCanplay(()=>{${1}});
endsnippet

snippet innerAudioContext-onPlay "音频播放事件"
innerAudioContext.onPlay((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onPause "音频暂停播放事件"
innerAudioContext.onPause((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onStop "音频停止播放事件"
innerAudioContext.onStop((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onEnded "音频自然播放结束事件"
innerAudioContext.onEnded((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onTimeUpdate "音频播放进度更新事件"
innerAudioContext.onTimeUpdate((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onError "音频播放错误事件"
innerAudioContext.onError((${1:errMsg})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onWaiting "音频加载中事件，当音频因为数据不足，需要停下来加载时会触发"
innerAudioContext.onWaiting((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onSeeking "音频进行seek操作事件"
innerAudioContext.onSeeking((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-onSeeked "音频完成seek操作事件"
innerAudioContext.onSeeked((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offCanplay "取消监听onCanplay事件"
innerAudioContext.offCanplay((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offPlay "取消监听onPlay事件"
innerAudioContext.offPlay((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offStop "取消监听onStop事件"
innerAudioContext.offStop((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offEnded "取消监听onEnded事件"
innerAudioContext.offEnded((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offTimeUpdate "取消监听onTimeUpdate事件"
innerAudioContext.offTimeUpdate((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offError "取消监听onError事件"
innerAudioContext.offError((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offWaiting "取消监听onWaiting事件"
innerAudioContext.offWaiting((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offSeeking "取消监听onSeeking事件"
innerAudioContext.offSeeking((${1})=>{
	${2}
});
endsnippet

snippet innerAudioContext-offSeeked "取消监听onSeeked事件"
innerAudioContext.offSeeked((${1})=>{
	${2}
});
endsnippet

snippet wx-getAvailableAudioSources "获取当前支持的音频输入源"
wx.getAvailableAudioSources({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-chooseVideo "拍摄视频或从手机相册中选视频，返回视频的临时文件路径。"
wx.chooseVideo({
	sourceType:['album', 'camera'],
	compressed: ${1:true},
	maxDuration:${2:15},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-saveVideoToPhotosAlbum "保存视频到系统相册。需要用户授权 scope.writePhotosAlbum"
wx.saveVideoToPhotosAlbum({
	filePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-createVideoContext "创建并返回 video 上下文 videoContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <video/> 组件"
${1:var videoContext = }wx.createVideoContext('${2:video}'${3:, this});
endsnippet

snippet videoContext-play "播放"
videoContext.play();
endsnippet

snippet videoContext-pause "暂停"
videoContext.pause();
endsnippet

snippet videoContext-stop "停止"
videoContext.stop();
endsnippet

snippet videoContext-seek "跳转到指定位置，单位 s"
videoContext.seek(${1});
endsnippet

snippet videoContext-sendDanmu "发送弹幕，包含两个属性 text, color。"
videoContext.sendDanmu({
	text: ${1},
	color: ${2}
});
endsnippet

snippet videoContext-playbackRate "设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5"
videoContext.playbackRate(${1});
endsnippet

snippet videoContext-requestFullScreen "进入全屏，可传入{direction}参数, 有效值为 0, 90,-90"
videoContext.requestFullScreen({
	direction: ${1:0}
});
endsnippet

snippet videoContext-exitFullScreen "退出全屏"
videoContext.exitFullScreen();
endsnippet

snippet videoContext-showStatusBar "显示状态栏，仅在iOS全屏下有效"
videoContext.showStatusBar();
endsnippet

snippet videoContext-hideStatusBar "隐藏状态栏，仅在iOS全屏下有效"
videoContext.hideStatusBar();
endsnippet

snippet wx-createCameraContext "创建并返回 camera 上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。1.6.0 开始支持"
${1:var cameraContext = }wx.createCameraContext(${2:this});
endsnippet

snippet cameraContext-takePhoto "拍照，可指定质量(high, normal, low，默认normal)，成功则返回图片"
cameraContext.takePhoto({
	quality: ${1:normal},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet cameraContext-startRecord "开始录像"
cameraContext.startRecord({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
	timeoutCallback: (result)=>{
		${2}
	},
});
endsnippet

snippet cameraContext-stopRecord "结束录像，成功则返回封面与视频"
cameraContext.stopRecord({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-createLivePlayerContext "操作对应的 <live-player/> 组件。 创建并返回 live-player 上下文 LivePlayerContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <live-player/> 组件。"
${1:var livePlayerContext = }wx.createLivePlayerContext('${2:live-player}'${3:, this})
endsnippet

snippet livePlayerContext-play "播放"
livePlayerContext.play({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-stop "停止"
livePlayerContext.stop({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-mute "静音"
livePlayerContext.mute({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-pause "暂停"
livePlayerContext.pause({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-resume "恢复"
livePlayerContext.resume({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-requestFullScreen "进入全屏"
livePlayerContext.requestFullScreen({
	direction: ${1:0},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePlayerContext-exitFullScreen "退出全屏"
livePlayerContext.exitFullScreen({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-createLivePusherContext "创建并返回 live-pusher 上下文 LivePusherContext 对象，LivePusherContext 与页面的 <live-pusher /> 组件绑定，一个页面只能有一个 live-pusher，通过它可以操作对应的 <live-pusher/> 组件。 在自定义组件下，第一个参数传入组件实例this，以操作组件内 <live-pusher/> 组件。"
${1:var livePusherContext = }wx.createLivePusherContext('${2:live-pusher}'${3:, this})
endsnippet

snippet livePusherContext-play "播放推流"
livePusherContext.play({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-stop "停止推流"
livePusherContext.stop({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-pause "暂停推流"
livePusherContext.pause({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-resume "恢复推流"
livePusherContext.resume({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-switchCamera "切换前后摄像头"
livePusherContext.switchCamera({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-snapshot "快照"
livePusherContext.snapshot({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet livePusherContext-toggleTorch "切换闪光灯"
livePusherContext.toggleTorch({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-loadFontFace "动态加载网络字体"
wx.loadFontFace({
	family: '${1}',
	source: '${2}',
	desc: {
		style: '${3:normal}',
		weight: '${4:normal}',
		variant: '${5:normal}'
	},
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-saveFile "保存文件到本地。注意：saveFile会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用"
wx.saveFile({
	tempFilePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getSavedFileList "获取本地已保存的文件列表"
wx.getSavedFileList({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getSavedFileInfo "获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 wx.getFileInfo 接口"
wx.getSavedFileInfo({
	filePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-removeSavedFile "删除本地存储的文件"
wx.removeSavedFile({
	filePath: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-openDocument "新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx"
wx.openDocument({
	filePath: ${1},
	fileType: ${2:'docx'},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setStorage "将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。"
wx.setStorage({
	key: '${1:key}',
	data: ${2:data},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setStorageSync "将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。"
wx.setStorageSync(${1:key}, ${2:data});
endsnippet

snippet wx-getStorage "从本地缓存中异步获取指定 key 对应的内容。"
wx.getStorage({
	key: '${1:key}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getStorageSync "从本地缓存中同步获取指定 key 对应的内容。"
wx.getStorageSync(${1:key});
endsnippet

snippet wx-getStorageInfo "异步获取当前storage的相关信息"
wx.getStorageInfo({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getStorageInfoSync "同步获取当前storage的相关信息"
${1:let storageInfo = }wx.getStorageInfoSync();
endsnippet

snippet wx-removeStorage "从本地缓存中异步移除指定 key。"
wx.removeStorage({
	key: '${1:key},'
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-removeStorageSync "从本地缓存中同步移除指定 key。"
wx.removeStorageSync(${1:key});
endsnippet

snippet wx-clearStorage "异步清除本地数据缓存"
wx.clearStorage();
endsnippet

snippet wx-clearStorageSync "同步清除本地数据缓存"
wx.clearStorageSync();
endsnippet

snippet wx-getLocation "获取当前的地理位置、速度。"
wx.getLocation({
	type: '${1:wgs84}',
	altitude: ${2:false},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-chooseLocation "打开地图选择位置。需要用户授权 scope.userLocation"
wx.chooseLocation({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-openLocation "​使用微信内置地图查看位置。 需要用户授权 scope.userLocation"
wx.openLocation({
	latitude: ${1:0},
	longitude: ${2:0},
	scale: ${3:18},
	name: '${4}',
	address: '${5}',
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-createMapContext "创建并返回 map 上下文 mapContext 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 <map/> 组件"
${1:var mapContext = }wx.createMapContext('${2:map}'${3:, this});
endsnippet

snippet mapContext-getCenterLocation "获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 wx.openLocation"
mapContext.getCenterLocation({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet mapContext-moveToLocation "将地图中心移动到当前定位点，需要配合map组件的show-location使用"
mapContext.moveToLocation();
endsnippet

snippet mapContext-translateMarker "平移marker，带动画"
mapContext.translateMarker({
	markerId: ${1},
	destination: {
		latitude: ${2},
		longitude: ${3}
	},
	autoRotate: ${4:false},
	rotate: ${5},
	duration: ${6:1000},
	animationEnd: ()=>{},
	fail: ()=>{}
});
endsnippet

snippet mapContext-includePoints "缩放视野展示所有经纬度"
mapContext.includePoints({
	points: [
		{
			latitude: ${1:latitude},
			longitude: ${2:longitude}
		}
	],
	padding:[$3]
});
endsnippet

snippet mapContext-getRegion "获取当前地图的视野范围"
mapContext.getRegion({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet mapContext-getScale "获取当前地图的缩放级别"
mapContext.getScale({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getSystemInfo "异步获取系统信息。"
wx.getSystemInfo({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getSystemInfoSync "获取系统信息同步接口"
${var systemInfo = }wx.getSystemInfoSync();
endsnippet

snippet wx-canIUse "判断小程序的API，回调，参数，组件等是否在当前版本可用。"
wx.canIUse(${1});
endsnippet

snippet wx-onMemoryWarning "监听内存不足的告警事件，Android下有告警等级划分，只有LOW和CRITICAL会回调开发者；iOS无等级划分"
wx.onMemoryWarning((result) => {
	${1}
});
endsnippet

snippet wx-getNetworkType "获取网络类型"
wx.getNetworkType({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onNetworkStatusChange "监听网络状态变化。"
wx.onNetworkStatusChange((result) => {
	${1}
});
endsnippet

snippet wx-onAccelerometerChange "监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 wx.stopAccelerometer 停止监听。"
wx.onAccelerometerChange((result) => {
	${1}
});
endsnippet

snippet wx-startAccelerometer "开始监听加速度数据。"
wx.startAccelerometer({
	interval: '${1:normal}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopAccelerometer "停止监听加速度数据。"
wx.stopAccelerometer({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onCompassChange "监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用wx.stopCompass停止监听。"
wx.onCompassChange((result) => {
	${1}
});
endsnippet

snippet wx-startCompass "开始监听罗盘数据。"
wx.startCompass({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopCompass "停止监听罗盘数据。"
wx.stopCompass({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-makePhoneCall "拨打电话"
wx.makePhoneCall({
	phoneNumber: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-scanCode "调起客户端扫码界面，扫码成功后返回对应的结果"
wx.scanCode({
	onlyFromCamera: ${1:false},
	scanType: ['${2:qrCode}','${3:barCode}','${4:datamatrix}','${5:pdf417}'],
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setClipboardData "设置系统剪贴板的内容"
wx.setClipboardData({
	data: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getClipboardData "获取系统剪贴板内容"
wx.getClipboardData({
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-openBluetoothAdapter "初始化小程序蓝牙模块，生效周期为调用wx.openBluetoothAdapter至调用wx.closeBluetoothAdapter或小程序被销毁为止。"
wx.openBluetoothAdapter({
	success: (result)=>{
		${1}
	,
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-closeBluetoothAdapter "关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源。"
wx.closeBluetoothAdapter({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getBluetoothAdapterState "获取本机蓝牙适配器状态"
wx.getBluetoothAdapterState({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onBluetoothAdapterStateChange "监听蓝牙适配器状态变化事件"
wx.onBluetoothAdapterStateChange((result) => {
	${1}
});
endsnippet

snippet wx-startBluetoothDevicesDiscovery "开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。"
wx.startBluetoothDevicesDiscovery({
	services:[${1}]
	allowDuplicatesKey:${2:false}
	interval:${3:0}
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopBluetoothDevicesDiscovery "停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。"
wx.stopBluetoothDevicesDiscovery({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getBluetoothDevices "获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。"
wx.getBluetoothDevices({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onBluetoothDeviceFound "监听寻找到新设备的事件"
wx.onBluetoothDeviceFound((result) => {
	${1}
});
endsnippet

snippet wx-getConnectedBluetoothDevices "根据 uuid 获取处于已连接状态的设备"
wx.getConnectedBluetoothDevices({
	services: [${1}],
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-createBLEConnection "连接低功耗蓝牙设备。"
wx.createBLEConnection({
	deviceId: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-closeBLEConnection "断开与低功耗蓝牙设备的连接"
wx.closeBLEConnection({
	deviceId: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onBLEConnectionStateChange "监听低功耗蓝牙连接状态的改变事件，包括开发者主动连接或断开连接，设备丢失，连接异常断开等等"
wx.onBLEConnectionStateChange((result) => {
	${1}
});
endsnippet

snippet wx-getBLEDeviceServices "获取蓝牙设备所有 service（服务）"
wx.getBLEDeviceServices({
	deviceId: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getBLEDeviceCharacteristics "获取蓝牙设备某个服务中的所有 characteristic（特征值）"
wx.getBLEDeviceCharacteristics({
	deviceId: ${1},
	services: ${2},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-readBLECharacteristicValue "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性"
wx.readBLECharacteristicValue({
	deviceId: ${1},
	services: ${2},
	characteristicId: ${3},
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-writeBLECharacteristicValue "向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持write才可以成功调用，具体参照 characteristic 的 properties 属性"
wx.writeBLECharacteristicValue({
	deviceId: ${1},
	services: ${2},
	characteristicId: ${3},
	value: ${4:<ArrayBuffer类型>},
	success: (result)=>{
		${5}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-notifyBLECharacteristicValueChange "启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持notify或者indicate才可以成功调用，具体参照 characteristic 的 properties 属性"
wx.notifyBLECharacteristicValueChange({
	deviceId: ${1},
	services: ${2},
	characteristicId: ${3},
	state: ${4:true},
	value: ${5:<ArrayBuffer类型>},
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onBLECharacteristicValueChange "监听低功耗蓝牙设备的特征值变化。必须先启用notify接口才能接收到设备推送的notification。"
wx.onBLECharacteristicValueChange((result) => {
	${1}
});
endsnippet

snippet wx-startBeaconDiscovery "开始搜索附近的iBeacon设备"
wx.startBeaconDiscovery({
	uuids: [${1}],
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopBeaconDiscovery "停止搜索附近的iBeacon设备"
wx.stopBeaconDiscovery({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getBeacons "获取所有已搜索到的iBeacon设备"
wx.getBeacons({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onBeaconUpdate "监听 iBeacon 设备的更新事件"
wx.onBeaconUpdate((result) => {
	${1}
});
endsnippet

snippet wx-onBeaconServiceChange "监听 iBeacon 服务的状态变化"
wx.onBeaconServiceChange((result) => {
	${1}
});
endsnippet

snippet wx-setScreenBrightness "设置屏幕亮度"
wx.setScreenBrightness({
	value: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getScreenBrightness "获取屏幕亮度。"
wx.getScreenBrightness({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-vibrateLong "使手机发生较长时间的振动（400ms）"
wx.vibrateLong({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-vibrateShort "使手机发生较短时间的振动（15ms）"
wx.vibrateShort({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setKeepScreenOn "设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。"
wx.setKeepScreenOn({
	keepScreenOn: ${1:true},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onUserCaptureScreen "监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件"
wx.onUserCaptureScreen((result)=>{
	${1}
});
endsnippet

snippet wx-addPhoneContact "调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式，写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。此API参数非常多，请参考文档。"
wx.addPhoneContact({
	photoFilePath: ${1},
	nickName: ${2},
	lastName: ${3},
	middleName: ${4},
	firstName: ${5},
	mobilePhoneNumber: ${6},
	weChatNumber: ${7},
	email: ${8},
	success: (result)=>{
		${9}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getHCEState "判断当前设备是否支持 HCE 能力"
wx.getHCEState({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-startHCE "初始化NFC模块"
wx.startHCE({
	aid_list: [${1}],
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopHCE "关闭 NFC 模块。仅在安卓系统下有效。"
wx.stopHCE({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onHCEMessage "监听 NFC 设备的消息回调，并在回调中处理。"
wx.onHCEMessage((result) => {
	${1}
});
endsnippet

snippet wx-sendHCEMessage "发送 NFC 消息。仅在安卓系统下有效。"
wx.sendHCEMessage({
	data: ${1:<ArrayBuffer类型>},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-startWifi "初始化Wi-Fi模块。"
wx.startWifi({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopWifi "关闭Wi-Fi模块。"
wx.stopWifi({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-connectWifi "连接Wi-Fi。若已知Wi-Fi信息，可以直接利用该接口连接。"
wx.connectWifi({
	SSID: ${1},
	BSSID: ${2},
	password: ${3},
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getWifiList "请求获取Wi-Fi列表，在onGetWifiList注册的回调中返回wifiList数据。"
wx.getWifiList({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onGetWifiList "监听在获取到Wi-Fi列表数据时的事件，在回调中将返回wifiList。"
wx.onGetWifiList((result) => {
	${1}
});
endsnippet

snippet wx-setWifiList "iOS特有接口，在 onGetWifiList 回调后，利用接口设置 wifiList 中 AP 的相关信息。"
wx.setWifiList({
	wifiList: [
		{
			SSID: ${1},
			BSSID: ${2},
			password: ${3}
		}
	],
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onWifiConnected "监听连接上Wi-Fi的事件。"
wx.onWifiConnected((result) => {
	${1}
});
endsnippet

snippet wx-getConnectedWifi "获取已连接中的Wi-Fi信息"
wx.getConnectedWifi({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showToast "显示消息提示框"
wx.showToast({
	title: '${1}',
	icon: '${2:none}',
	image: '${3}',
	duration: ${4:1500},
	mask: ${5:false},
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showLoading "显示loading提示框, 需主动调用wx.hideLoading才能关闭提示框"
wx.showLoading({
	title: ${1},
	mask: ${2:true},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-hideToast "隐藏消息提示框"
wx.hideToast();
endsnippet

snippet wx-hideLoading "隐藏loading提示框"
wx.hideLoading();
endsnippet

snippet wx-showModal "显示模态弹窗"
wx.showModal({
	title: '${1}',
	content: '${2}',
	showCancel: ${3:true},
	cancelText: '${4:取消}',
	cancelColor: '${5:#000000}',
	confirmText: '${6:确定}',
	confirmColor: '${7:#3CC51F}',
	success: (result) => {
		${8:if(result.confirm){
			${9}
		}}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showActionSheet "显示操作菜单"
wx.showActionSheet({
	itemList: [${1}],
	itemColor: '${2:#000000}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-onWindowResize "监听窗口尺寸变化事件"
wx.onWindowResize((result)=>{
		${1}
	});
endsnippet

snippet wx-offWindowResize "取消监听窗口尺寸变化事件"
wx.offWindowResize((result)=>{
		${1}
	});
endsnippet

snippet wx-setTopBarText "动态设置置顶栏文字内容，只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容。"
wx.setTopBarText({
	text: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setNavigationBarTitle "动态设置当前页面的标题。"
wx.setNavigationBarTitle({
	title: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showNavigationBarLoading "在当前页面显示导航条加载动画。"
wx.showNavigationBarLoading();
endsnippet

snippet wx-hideNavigationBarLoading "隐藏导航条加载动画。"
wx.hideNavigationBarLoading();
endsnippet

snippet wx-setNavigationBarColor "设置导航栏颜色"
wx.setNavigationBarColor({
	frontColor: '${1:#ffffff}',
	backgroundColor: '${2:#000000}',
	animation: {
		duration: ${3:0},
		timingFunc: '${4:linear}'
	},
	success: (result)=>{
		${5}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setTabBarBadge "为tabBar某一项的右上角添加文本"
wx.setTabBarBadge({
	index: ${1},
	text: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-removeTabBarBadge "移除tabBar某一项右上角的文本"
wx.removeTabBarBadge({
	index: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showTabBarRedDot "显示tabBar某一项的右上角的红点"
wx.showTabBarRedDot({
	index: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-hideTabBarRedDot "隐藏tabBar某一项的右上角的红点"
wx.hideTabBarRedDot({
	index: ${1},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setTabBarStyle "动态设置tabBar的整体样式"
wx.setTabBarStyle({
	color: '${1:#000000}',
	selectedColor: '${2:#1AAD16}',
	backgroundColor: '${3:#e3e3e3}',
	borderStyle: '${4:black}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setTabBarItem "动态设置tabBar某一项的内容"
wx.setTabBarItem({
	index: ${1},
	text: ${2},
	iconPath: ${3},
	selectedIconPath: ${4},
	success: (result)=>{
		${5}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showTabBar "显示 tabBar"
wx.showTabBar({
	animation: ${1:false},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-hideTabBar "隐藏 tabBar"
wx.hideTabBar({
	animation: ${1:false},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-setBackgroundColor "动态设置窗口的背景色"
wx.setBackgroundColor({
	backgroundColor: '${1}',
	backgroundColorTop: '${2}',
	backgroundColorBottom: '${3}'
});
endsnippet

snippet wx-setBackgroundTextStyle "动态设置下拉背景字体、loading图的样式"
wx.setBackgroundTextStyle({
	textStyle: '${1:dark}'
});
endsnippet

snippet wx-navigateTo "保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。目前页面路径最多只能十层。"
wx.navigateTo({
	url: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-redirectTo "关闭当前页面，跳转到应用内的某个页面。"
wx.redirectTo({
	url: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-reLaunch "关闭所有页面，打开到应用内的某个页面。"
wx.reLaunch({
	url: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-switchTab "跳转到tabBar页面，并关闭其他所有非tabBar页面"
wx.switchTab({
	url: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-navigateBack "关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages()) 获取当前的页面栈，决定需要返回几层。"
wx.navigateBack({
	delta: ${1:1}
});
endsnippet

snippet wx-createAnimation "创建一个动画实例animation。调用实例的方法来描述动画。"
${1:let animation = }wx.createAnimation({
	duration: ${2:400},
	timingFunction: '${3:linear}',
	delay: ${4:0},
	transformOrigin: '${5:50% 50% 0}'
});
endsnippet

snippet animation-opacity "透明度，参数范围 0~1"
animation.opacity(${1});
endsnippet

snippet animation-backgroundColor "颜色值"
animation.backgroundColor(${1});
endsnippet

snippet animation-width "宽度"
animation.width(${1});
endsnippet

snippet animation-height "长度"
animation.height(${1});
endsnippet

snippet animation-top "顶部距离"
animation.top(${1});
endsnippet

snippet animation-left "左侧距离"
animation.height(${1});
endsnippet

snippet animation-bottom "底部距离"
animation.bottom(${1});
endsnippet

snippet animation-right "右侧距离"
animation.right(${1});
endsnippet

snippet animation-rotate "绕原点旋转"
animation.rotate(${1});
endsnippet

snippet animation-rotateX "绕x轴旋转"
animation.rotateX(${1});
endsnippet

snippet animation-rotateY "绕y轴旋转"
animation.rotateY(${1});
endsnippet

snippet animation-rotateZ "绕z轴旋转"
animation.rotateZ(${1});
endsnippet

snippet animation-rotate3d "3d旋转"
animation.rotate3d(${1},${2},${3},${4});
endsnippet

snippet animation-scale "x轴[y轴]缩放。一个参数时，表示在X轴、Y轴两个相同；两个参数时表示在X轴，在Y轴不同"
animation.scale(${1}${2:,});
endsnippet

snippet animation-scaleX "x轴缩放"
animation.scaleX(${1});
endsnippet

snippet animation-scaleY "y轴缩放"
animation.scaleY(${1});
endsnippet

snippet animation-scaleZ "z轴缩放"
animation.scaleZ(${1});
endsnippet

snippet animation-scale3d "3d缩放"
animation.scale3d(${1},${2},${3});
endsnippet

snippet animation-translate "x轴[y轴]偏移。一个参数时，表示在X轴；两个参数时表示在X轴，在Y轴"
animation.translate(${1}${2:,});
endsnippet

snippet animation-translateX "x轴偏移"
animation.translateX(${1});
endsnippet

snippet animation-translateY "y轴偏移"
animation.translateY(${1});
endsnippet

snippet animation-translateZ "z轴偏移"
animation.translateZ(${1});
endsnippet

snippet animation-translate3d "3d偏移"
animation.translate3d(${1},${2},${3});
endsnippet

snippet animation-skew "x轴[y轴]倾斜。一个参数时，表示在X轴；两个参数时表示在X轴，在Y轴"
animation.skew(${1}${2:,});
endsnippet

snippet animation-skewX "x轴倾斜"
animation.skewX(${1});
endsnippet

snippet animation-skewY "y轴倾斜"
animation.skewY(${1});
endsnippet

snippet animation-matrix "平面矩阵变换"
animation.matrix(${1},${2},${3},${4},${5},${6});
endsnippet

snippet animation-matrix3d "立体矩阵变换"
animation.matrix3d(${1},${2},${3},${4},${5},${6},${7},${8},${9},${10},${11},${12},${13},${14},${15},${16});
endsnippet

snippet wx-pageScrollTo "将页面滚动到目标位置。"
wx.pageScrollTo({
	scrollTop: ${1:0},
	duration: ${2:300}
});
endsnippet

snippet wx-startPullDownRefresh "开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致"
wx.startPullDownRefresh({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-stopPullDownRefresh "停止当前页面下拉刷新。"
wx.stopPullDownRefresh
endsnippet

snippet wx-getExtConfig "获取第三方平台自定义的数据字段"
wx.getExtConfig({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getExtConfigSync "同步获取第三方平台自定义的数据字段"
${1:let extConfig = }wx.getExtConfigSync();
endsnippet

snippet wx-login "调用接口wx.login() 获取临时登录凭证（code）"
wx.login({
	timeout:${1:10000},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-checkSession "校验用户当前session_key是否有效。"
wx.checkSession({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-authorize "提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。"
wx.authorize({
	scope: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getUserInfo "当用户未授权过，调用该接口将直接报错；当用户授权过，可以使用该接口获取用户信息"
wx.getUserInfo({
	withCredentials: '${1:false}',
	lang: '${2:zh_CN}',
	timeout:${3:10000},
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-faceVerifyForPay "支付各个安全场景验证人脸。"
wx.faceVerifyForPay({
	scene: '${1}',
	package: '${2}',
	packageSign: '${3}',
	otherVerifyTitle: '${4}',
	success: (result)=>{
		${5}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-requestPayment "发起微信支付。"
wx.requestPayment({
	timeStamp: '${1}',
	nonceStr: '${2}',
	package: '${3}',
	signType: '${4}',
	paySign: '${5}',
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-showShareMenu "显示当前页面的转发按钮"
wx.showShareMenu({
	withShareTicket: ${1:false}
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-hideShareMenu "隐藏转发按钮"
wx.hideShareMenu({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-updateShareMenu "更新转发属性"
wx.updateShareMenu({
	withShareTicket: ${1:false}
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getShareInfo "获取转发详细信息"
wx.getShareInfo({
	shareTicket: ${1},
	timeout:${2:10000},
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getAccountInfoSync "获取当前账号信息"
${1:let accInfo = }wx.getAccountInfoSync();
endsnippet

snippet wx-chooseAddress "调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。"
wx.chooseAddress({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-addCard "批量添加卡券"
wx.addCard({
	cardList: [${1}],
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-openCard "查看微信卡包中的卡券"
wx.openCard({
	cardList: [${1}],
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-openSetting "调起客户端小程序设置界面，返回用户设置的操作结果"
wx.openSetting({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getSetting "获取用户的当前设置"
wx.getSetting({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getWeRunData "获取用户过去三十天微信运动步数，需要先调用 wx.login 接口"
wx.getWeRunData({
	timeout:${1:10000},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-navigateToMiniProgram "打开同一公众号下关联的另一个小程序"
wx.navigateToMiniProgram({
	appId:'${1}',
	path:'${2}',
	extraData:{${3}},
	envVersion:'${4:release}',
	success: (result)=>{
		${5}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-navigateBackMiniProgram "返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功"
wx.navigateBackMiniProgram({
	extraData:{${1}},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-chooseInvoice "选择用户已有的发票"
wx.chooseInvoice({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-chooseInvoiceTitle "选择用户的发票抬头"
wx.chooseInvoiceTitle({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-checkIsSupportSoterAuthentication "获取本机支持的SOTER生物认证方式"
wx.checkIsSupportSoterAuthentication({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-startSoterAuthentication "开始SOTER生物认证"
wx.startSoterAuthentication({
	requestAuthModes:['fingerPrint'],
	challenge:'${1}',
	authContent:'${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-checkIsSoterEnrolledInDevice "获取设备内是否录入如指纹等生物信息的接口"
wx.checkIsSoterEnrolledInDevice({
	checkAuthMode:{${1}},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getUpdateManager "获取全局唯一的版本更新管理器，用于管理小程序更新。"
${1:var updateManager = }wx.getUpdateManager();
endsnippet

snippet updateManager-onCheckForUpdate "当向微信后台请求完新版本信息，会进行回调"
updateManager.onCheckForUpdate((result) => {${1}});
endsnippet

snippet updateManager-onUpdateReady "当新版本下载完成，会进行回调"
updateManager.onUpdateReady((result) => {${1}});
endsnippet

snippet updateManager-onUpdateFailed "当新版本下载失败，会进行回调"
updateManager.onUpdateFailed((result) => {${1}});
endsnippet

snippet updateManager-applyUpdate "当新版本下载完成，调用该方法会强制当前小程序应用上新版本并重启"
updateManager.applyUpdate();
endsnippet

snippet wx-createWorker "创建一个Worker线程，并返回Worker实例，目前限制最多只能创建一个Worker，创建下一个Worker前请调用Worker.terminate。"
${1:var worker = }wx.createWorker(${1});
endsnippet

snippet worker-postMessage "向Worker线程发送的消息。"
worker.postMessage(${1});
endsnippet

snippet worker-onMessage "监听Worker线程向当前线程发送的消息"
worker.onMessage((result) => {${1}});
endsnippet

snippet worker-terminate "结束当前Worker线程，仅限在主线程Worker实例上调用。"
worker.terminate();
endsnippet

snippet wx-reportMonitor "自定义业务数据监控上报接口。"
wx.reportMonitor(${1:name},${2:value});
endsnippet

snippet wx-setEnableDebug "设置是否打开调试开关，此开关对正式版也能生效"
wx.setEnableDebug({
	enableDebug:{${1:true}},
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet wx-getLogManager "获取日志管理器 logManager 对象。"
${1:var logger = }wx.getLogManager();
endsnippet

snippet logger-log "写log日志，可以提供任意个参数。"
logger.log(${1});
endsnippet

snippet logger-info "写info日志，可以提供任意个参数。"
logger.info(${1});
endsnippet

snippet logger-warn "写warn日志，可以提供任意个参数。"
logger.warn(${1});
endsnippet

snippet logger-debug "写debug日志，可以提供任意个参数。"
logger.debug(${1});
endsnippet

snippet wx-canvasToTempFilePath "把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。"
wx.canvasToTempFilePath({
	x: ${1:0},
	y: ${2:0},
	width: ${3},
	height: ${4},
	destWidth: ${5},
	destHeight: ${6},
	canvasId: ${7},
	fileType: ${8:png},
	quality: ${9:1.0},
	success: (result)=>{
		${10}
	},
	fail: ()=>{},
	complete: ()=>{}
}, this);
endsnippet

snippet wx-canvasGetImageData "返回一个数组，用来描述 canvas 区域隐含的像素数据。"
wx.canvasGetImageData({
	canvasId: ${1},
	x: ${2:0},
	y: ${3:0},
	width: ${4},
	height: ${5},
	success: (result)=>{
		${6}
	},
	fail: ()=>{},
	complete: ()=>{}
}, this);
endsnippet

snippet wx-canvasPutImageData "将像素数据绘制到画布的方法。"
wx.canvasPutImageData({
	canvasId: ${1},
	data: ${2},
	x: ${3},
	y: ${4},
	width: ${5},
	height: ${6},
	success: (result)=>{
		${7}
	},
	fail: ()=>{},
	complete: ()=>{}
}, this);
endsnippet

snippet wx-createCanvasContext "创建 canvas 绘图上下文（指定 canvasId）。"
${1:var cvsCtx = }wx.createCanvasContext(${2:canvas-id}, this);
endsnippet

snippet cvsCtx-setFillStyle "设置填充色。"
cvsCtx.setFillStyle('${1}');
endsnippet

snippet cvsCtx-fillStyle "设置填充色。基础库 1.9.90 起支持"
cvsCtx.fillStyle = ${1};
endsnippet

snippet cvsCtx-setStrokeStyle "设置边框颜色。"
cvsCtx.setStrokeStyle(${1});
endsnippet

snippet cvsCtx-strokeStyle "设置边框颜色。基础库 1.9.90 起支持"
cvsCtx.strokeStyle = ${1};
endsnippet

snippet cvsCtx-setShadow "设置阴影样式。"
cvsCtx.setShadow(${1:offsetX}, ${2:offsetY}, ${3:blur}, ${4:color});
endsnippet

snippet cvsCtx-createLinearGradient "创建一个线性的渐变颜色。需要使用 addColorStop() 来指定渐变点，至少要两个。"
cvsCtx.createLinearGradient(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1});
endsnippet

snippet cvsCtx-createCircularGradient "创建一个圆形的渐变颜色。需要使用 addColorStop() 来指定渐变点，至少要两个。"
cvsCtx.createCircularGradient(${1:x}, ${2:y}, ${3:r});
endsnippet

snippet cvsCtx-addColorStop "创建一个颜色的渐变点。"
cvsCtx.addColorStop(${1:stop(0 ~ 1)}, ${2:color});
endsnippet

snippet cvsCtx-setLineWidth "设置线条的宽度。"
cvsCtx.setLineWidth(${1});
endsnippet

snippet cvsCtx-lineWidth "设置线条的宽度。基础库 1.9.90 起支持"
cvsCtx.lineWidth = ${1};
endsnippet

snippet cvsCtx-setLineCap "设置线条的端点样式。"
cvsCtx.setLineCap('${1:butt}');
endsnippet

snippet cvsCtx-lineCap "设置线条的端点样式。基础库 1.9.90 起支持"
cvsCtx.lineCap = '${1:butt}';
endsnippet

snippet cvsCtx-setLineJoin "设置线条的交点样式。"
cvsCtx.setLineJoin('${1:bevel}');
endsnippet

snippet cvsCtx-lineJoin "设置线条的交点样式。基础库 1.9.90 起支持"
cvsCtx.lineJoin = '${1:bevel}';
endsnippet

snippet cvsCtx-setLineDash "设置线条的宽度。"
cvsCtx.setLineDash([${1:pattern}], ${2:offset});
endsnippet

snippet cvsCtx-setMiterLimit "设置最大斜接长度，斜接长度指的是在两条线交汇处内角和外角之间的距离。 当 setLineJoin() 为 miter 时才有效。"
cvsCtx.setMiterLimit(${1});
endsnippet

snippet cvsCtx-rect "创建一个矩形。"
cvsCtx.rect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet cvsCtx-fillRect "填充一个矩形。"
cvsCtx.fillRect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet cvsCtx-strokeRect "画一个矩形(非填充)。"
cvsCtx.strokeRect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet cvsCtx-clearRect "清除画布上在该矩形区域内的内容。"
cvsCtx.clearRect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet cvsCtx-fill "对当前路径中的内容进行填充。"
cvsCtx.fill();
endsnippet

snippet cvsCtx-stroke "画出当前路径的边框。"
cvsCtx.stroke();
endsnippet

snippet cvsCtx-beginPath "开始创建一个路径，需要调用fill或者stroke才会使用路径进行填充或描边。"
cvsCtx.beginPath();
endsnippet

snippet cvsCtx-closePath "关闭一个路径"
cvsCtx.closePath();
endsnippet

snippet cvsCtx-moveTo "把路径移动到画布中的指定点，不创建线条。"
cvsCtx.moveTo(${1:x}, ${2:y});
endsnippet

snippet cvsCtx-lineTo "lineTo 方法增加一个新点，然后创建一条从上次指定点到目标点的线。"
cvsCtx.lineTo(${1:x}, ${2:y});
endsnippet

snippet cvsCtx-arc "画一条弧线。"
cvsCtx.arc(${1:x}, ${2:y}, ${3:r}, ${4:sAngle}, ${5:eAngle}, ${6:false});
endsnippet

snippet cvsCtx-bezierCurveTo "创建三次方贝塞尔曲线路径。曲线的起始点为路径中前一个点。"
cvsCtx.bezierCurveTo(${1:cp1x}, ${2:cp1y}, ${3:cp2x}, ${4:cp2y}, ${5:x}, ${6:y});
endsnippet

snippet cvsCtx-quadraticCurveTo "创建二次贝塞尔曲线路径。曲线的起始点为路径中前一个点。"
cvsCtx.quadraticCurveTo(${1:cpx}, ${2:cpy}, ${3:x}, ${4:y});
endsnippet

snippet cvsCtx-scale "在调用scale方法后，之后创建的路径其横纵坐标会被缩放。多次调用scale，倍数会相乘。"
cvsCtx.scale(${1:scaleWidth}, ${2:scaleHeight});
endsnippet

snippet cvsCtx-rotate "以原点为中心，原点可以用 translate方法修改。顺时针旋转当前坐标轴。"
cvsCtx.rotate(${1:degrees} * Math.PI/180);
endsnippet

snippet cvsCtx-translate "对当前坐标系的原点(0, 0)进行变换，默认的坐标系原点为页面左上角。"
cvsCtx.translate(${1:x}, ${2:y});
endsnippet

snippet cvsCtx-clip "从原始画布中剪切任意形状和尺寸。"
cvsCtx.clip();
endsnippet

snippet cvsCtx-setFontSize "设置字体的字号。"
cvsCtx.setFontSize(${1:20});
endsnippet

snippet cvsCtx-fillText "在画布上绘制被填充的文本。"
cvsCtx.fillText('${1:text}', ${2:x}, ${3:y});
endsnippet

snippet cvsCtx-setTextAlign "用于设置文字的对齐"
cvsCtx.setTextAlign('${1:center}');
endsnippet

snippet cvsCtx-textAlign "用于设置文字的对齐,基础库 1.9.90 起支持"
cvsCtx.textAlign = '${1:center}';
endsnippet

snippet cvsCtx-setTextBaseline "用于设置文字的水平对齐"
cvsCtx.setTextBaseline('${1:middle}');
endsnippet

snippet cvsCtx-textBaseline "用于设置文字的水平对齐,基础库 1.9.90 起支持"
cvsCtx.textBaseline = '${1:middle}';
endsnippet

snippet cvsCtx-drawImage "绘制图像到画布。"
cvsCtx.drawImage(${1:imageResource}, ${2:dx}, ${3:dy}, ${4:dWidth}, ${5:dHeight});
endsnippet

snippet cvsCtx-setGlobalAlpha "设置全局画笔透明度。"
cvsCtx.setGlobalAlpha(${1:1});
endsnippet

snippet cvsCtx-globalAlpha "设置全局画笔透明度。基础库 1.9.90 起支持"
cvsCtx.globalAlpha = ${1:1};
endsnippet

snippet cvsCtx-save "保存当前的绘图上下文。"
cvsCtx.save();
endsnippet

snippet cvsCtx-restore "恢复之前保存的绘图上下文。"
cvsCtx.restore();
endsnippet

snippet cvsCtx-draw "将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中"
cvsCtx.draw(${1:true}, ${2:callback});
endsnippet

snippet cvsCtx-measureText "测量文本尺寸信息，目前仅返回文本宽度。同步接口。"
${1:var metrics =}cvsCtx.measureText(${2});
endsnippet

snippet cvsCtx-globalCompositeOperation "该属性是设置要在绘制新形状时应用的合成操作的类型。"
cvsCtx.globalCompositeOperation = ${1};
endsnippet

snippet cvsCtx-arcTo "根据控制点和半径绘制圆弧路径。"
cvsCtx.arcTo(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:radius});
endsnippet

snippet cvsCtx-strokeText "给定的 (x, y) 位置绘制文本描边的方法"
cvsCtx.strokeText(${1:text}, ${2:x}, ${3:y});
endsnippet

snippet cvsCtx-lineDashOffset "设置虚线偏移量的属性"
cvsCtx.lineDashOffset = ${1:value};
endsnippet

snippet cvsCtx-createPattern "对指定的图像创建模式的方法，可在指定的方向上重复元图像"
cvsCtx.createPattern(${1:image}, ${2:repetition});
endsnippet

snippet cvsCtx-shadowBlur "设置阴影的模糊级别"
cvsCtx.shadowBlur = ${1:value};
endsnippet

snippet cvsCtx-shadowColor "设置阴影的颜色"
cvsCtx.shadowColor = ${1:value};
endsnippet

snippet cvsCtx-shadowOffsetX "设置阴影相对于形状在水平方向的偏移"
cvsCtx.shadowOffsetX = ${1:value};
endsnippet

snippet cvsCtx-shadowOffsetY "设置阴影相对于形状在竖直方向的偏移"
cvsCtx.shadowOffsetY = ${1:value};
endsnippet

snippet cvsCtx-font "设置当前字体样式的属性"
cvsCtx.font = '${1:style}, ${2:weight}, ${3:size}, ${4:family}';
endsnippet

snippet cvsCtx-setTransform "使用矩阵重新设置（覆盖）当前变换的方法"
cvsCtx.setTransform(${1:scaleX}, ${2:skewX}, ${3:skewY}, ${4:scaleY}, ${5:translateX}, ${6:translateY});
endsnippet

snippet wx-getFileSystemManager "获取全局唯一的文件管理器。"
${1:var fileManager = }wx.getFileSystemManager();
endsnippet

snippet fileManager-appendFile "在文件结尾追加内容"
fileManager.appendFile({
	filePath: '${1}',
	data: '${2}',
	encoding:'${3:utf8}',
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-appendFileSync "在文件结尾追加内容,同步接口"
try{
	fileManager.appendFileSync('${1}','${2}','${3:utf8}');
}catch(e){
	${4}
}
endsnippet

snippet fileManager-access "判断文件/目录是否存在"
fileManager.access({
	path: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-accessSync "判断文件/目录是否存在,同步接口"
try{
	fileManager.accessSync('${1}');
}catch(e){
	${2}
}
endsnippet

snippet fileManager-copyFile "复制文件"
fileManager.copyFile({
	srcPath: '${1}',
	destPath: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-copyFileSync "复制文件,同步接口"
try{
	fileManager.copyFileSync('${1}','${2}');
}catch(e){
	${3}
}
endsnippet

snippet fileManager-getSavedFileList "获取该小程序下已保存的本地缓存文件列表"
fileManager.getSavedFileList({
	success: (result)=>{
		${1}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-getFileInfo "获取该小程序下的 本地临时文件 或 本地缓存文件 信息"
fileManager.getFileInfo({
	filePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-mkdir "创建目录"
fileManager.mkdir({
	dirPath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-mkdirSync "创建目录,同步接口"
try{
	fileManager.mkdirSync('${1}');
}catch(e){
	${2}
}
endsnippet

snippet fileManager-removeSavedFile "删除该小程序下已保存的本地缓存文件"
fileManager.removeSavedFile({
	filePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-readFile "读取本地文件内容"
fileManager.readFile({
	filePath: '${1}',
	encoding: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-readFileSync "读取本地文件内容,同步接口"
try{
	var ${1:fileData} = fileManager.readFileSync('${2}','${3}');
}catch(e){
	${4}
}
endsnippet

snippet fileManager-readdir "读取目录内文件列表"
fileManager.readdir({
	dirPath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-readdirSync "读取目录内文件列表,同步接口"
try{
	var ${1:fileList} = fileManager.readdirSync('${2}');
}catch(e){
	${3}
}
endsnippet

snippet fileManager-rename "重命名文件，可以把文件从 oldPath 移动到 newPath"
fileManager.rename({
	oldPath: '${1}',
	newPath: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-renameSync "重命名文件，可以把文件从 oldPath 移动到 newPath,同步接口"
try{
	fileManager.renameSync('${1}','${2}');
}catch(e){
	${3}
}
endsnippet

snippet fileManager-rmdir "删除目录"
fileManager.rmdir({
	dirPath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-rmdirSync "删除目录,同步接口"
try{
	fileManager.rmdirSync('${1}');
}catch(e){
	${2}
}
endsnippet

snippet fileManager-saveFile "保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用"
fileManager.saveFile({
	tempFilePath: '${1}',
	filePath: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-saveFileSync "保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用,同步接口"
try{
	var ${1:fileNumber} = fileManager.saveFileSync('${2}','${3}');
}catch(e){
	${4}
}
endsnippet

snippet fileManager-stat "获取文件 Stats 对象"
fileManager.stat({
	path: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-statSync "获取文件 Stats 对象,同步接口"
try{
	var ${1:fileStat} = fileManager.statSync('${2}');
}catch(e){
	${3}
}
endsnippet

snippet fileStat-isDirectory "判断当前文件是否一个目录"
fileStat.isDirectory();
endsnippet

snippet fileStat-isFile "判断当前文件是否一个普通文件"
fileStat.isFile();
endsnippet

snippet fileManager-unlink "删除文件"
fileManager.unlink({
	filePath: '${1}',
	success: (result)=>{
		${2}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-unlinkSync "删除文件,同步接口"
try{
	fileManager.unlinkSync('${1}');
}catch(e){
	${2}
}
endsnippet

snippet fileManager-unzip "解压文件"
fileManager.unzip({
	zipFilePath: '${1}',
	targetPath: '${2}',
	success: (result)=>{
		${3}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-writeFile "写文件"
fileManager.writeFile({
	filePath: '${1}',
	data: '${2}',
	encoding: '${3:utf8}',
	success: (result)=>{
		${4}
	},
	fail: ()=>{},
	complete: ()=>{}
});
endsnippet

snippet fileManager-writeFileSync "写文件,同步接口"
try{
	fileManager.writeFileSync('${1}','${2}','${3:utf8}');
}catch(e){
	${4}
}
endsnippet

snippet wx-nextTick "用于延迟一部分操作到下一个时间片再执行"
wx.nextTick(()=>{
	${1}
});
endsnippet

snippet wx-getMenuButtonBoundingClientRect "获取菜单按钮的布局置信息"
let ${1:menuButton} = wx.getMenuButtonBoundingClientRect();
endsnippet

snippet wx-createIntersectionObserver "创建并返回一个 IntersectionObserver 对象实例"
let ${1:interObser} = wx.createIntersectionObserver(${2:this},${3});
endsnippet

snippet interObser-relativeTo "使用选择器指定一个节点，作为参照区域之一"
interObser.relativeTo(${1:selector},${2});
endsnippet

snippet interObser-relativeToViewport "指定页面显示区域作为参照区域之一"
interObser.relativeToViewport(${1});
endsnippet

snippet interObser-observe "指定目标节点并开始监听相交状态变化情况"
interObser.observe(${1:selector},(result)=>{
	${2}
});
endsnippet

snippet interObser-disconnect "停止监听。回调函数将不再触发"
interObser.disconnect();
endsnippet

snippet wx-createSelectorQuery "返回一个 SelectorQuery 对象实例。"
let ${1:selQuery} = wx.createSelectorQuery();
endsnippet

snippet selQuery-in "将选择器的选取范围更改为自定义组件 component 内（初始时，选择器仅选取页面范围的节点，不会选取任何自定义组件中的节点）。"
selQuery.in(${1:this});
endsnippet

snippet selQuery-select "在当前页面下选择第一个匹配选择器 selector 的节点，返回一个 NodesRef 对象实例，可以用于获取节点信息"
selQuery.select(${2:selector});
endsnippet

snippet selQuery-selectAll "在当前页面下选择匹配选择器 selector 的所有节点。"
selQuery.selectAll();
endsnippet

snippet selQuery-selectViewport "选择显示区域，可用于获取显示区域的尺寸、滚动位置等信息。"
selQuery.selectViewport();
endsnippet

snippet selQuery-exec "执行所有的请求，请求结果按请求次序构成数组，在callback的第一个参数中返回。"
selQuery.exec(result)=>{
	${1}
});
endsnippet
